// Code generated by MockGen. DO NOT EDIT.
// Source: lib/loadbalance/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUpstreamServerInterface is a mock of UpstreamServerInterface interface.
type MockUpstreamServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamServerInterfaceMockRecorder
}

// MockUpstreamServerInterfaceMockRecorder is the mock recorder for MockUpstreamServerInterface.
type MockUpstreamServerInterfaceMockRecorder struct {
	mock *MockUpstreamServerInterface
}

// NewMockUpstreamServerInterface creates a new mock instance.
func NewMockUpstreamServerInterface(ctrl *gomock.Controller) *MockUpstreamServerInterface {
	mock := &MockUpstreamServerInterface{ctrl: ctrl}
	mock.recorder = &MockUpstreamServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpstreamServerInterface) EXPECT() *MockUpstreamServerInterfaceMockRecorder {
	return m.recorder
}

// DecrementConnectionCount mocks base method.
func (m *MockUpstreamServerInterface) DecrementConnectionCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecrementConnectionCount")
}

// DecrementConnectionCount indicates an expected call of DecrementConnectionCount.
func (mr *MockUpstreamServerInterfaceMockRecorder) DecrementConnectionCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementConnectionCount", reflect.TypeOf((*MockUpstreamServerInterface)(nil).DecrementConnectionCount))
}

// GetAddress mocks base method.
func (m *MockUpstreamServerInterface) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockUpstreamServerInterfaceMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockUpstreamServerInterface)(nil).GetAddress))
}

// GetConnectionCount mocks base method.
func (m *MockUpstreamServerInterface) GetConnectionCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetConnectionCount indicates an expected call of GetConnectionCount.
func (mr *MockUpstreamServerInterfaceMockRecorder) GetConnectionCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionCount", reflect.TypeOf((*MockUpstreamServerInterface)(nil).GetConnectionCount))
}

// IncrementConnectionCount mocks base method.
func (m *MockUpstreamServerInterface) IncrementConnectionCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementConnectionCount")
}

// IncrementConnectionCount indicates an expected call of IncrementConnectionCount.
func (mr *MockUpstreamServerInterfaceMockRecorder) IncrementConnectionCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementConnectionCount", reflect.TypeOf((*MockUpstreamServerInterface)(nil).IncrementConnectionCount))
}

// IsHealthy mocks base method.
func (m *MockUpstreamServerInterface) IsHealthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockUpstreamServerInterfaceMockRecorder) IsHealthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockUpstreamServerInterface)(nil).IsHealthy))
}

// SetHealthy mocks base method.
func (m *MockUpstreamServerInterface) SetHealthy(healthy bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHealthy", healthy)
}

// SetHealthy indicates an expected call of SetHealthy.
func (mr *MockUpstreamServerInterfaceMockRecorder) SetHealthy(healthy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHealthy", reflect.TypeOf((*MockUpstreamServerInterface)(nil).SetHealthy), healthy)
}

// MockNetDialerInterface is a mock of NetDialerInterface interface.
type MockNetDialerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetDialerInterfaceMockRecorder
}

// MockNetDialerInterfaceMockRecorder is the mock recorder for MockNetDialerInterface.
type MockNetDialerInterfaceMockRecorder struct {
	mock *MockNetDialerInterface
}

// NewMockNetDialerInterface creates a new mock instance.
func NewMockNetDialerInterface(ctrl *gomock.Controller) *MockNetDialerInterface {
	mock := &MockNetDialerInterface{ctrl: ctrl}
	mock.recorder = &MockNetDialerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetDialerInterface) EXPECT() *MockNetDialerInterfaceMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockNetDialerInterface) Dial(network, address string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", network, address)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockNetDialerInterfaceMockRecorder) Dial(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockNetDialerInterface)(nil).Dial), network, address)
}

// DialTimeout mocks base method.
func (m *MockNetDialerInterface) DialTimeout(network, address string, timeout time.Duration) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialTimeout", network, address, timeout)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialTimeout indicates an expected call of DialTimeout.
func (mr *MockNetDialerInterfaceMockRecorder) DialTimeout(network, address, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialTimeout", reflect.TypeOf((*MockNetDialerInterface)(nil).DialTimeout), network, address, timeout)
}

// GetRetryLimit mocks base method.
func (m *MockNetDialerInterface) GetRetryLimit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetryLimit")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRetryLimit indicates an expected call of GetRetryLimit.
func (mr *MockNetDialerInterfaceMockRecorder) GetRetryLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetryLimit", reflect.TypeOf((*MockNetDialerInterface)(nil).GetRetryLimit))
}

// GetTimeout mocks base method.
func (m *MockNetDialerInterface) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockNetDialerInterfaceMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockNetDialerInterface)(nil).GetTimeout))
}
